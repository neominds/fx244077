file name --  
1.pci-iproc.c  
iproc_pcie_resume(struct iproc_pcie *pcie, struct list_head *res)
int iproc_pcie_suspend(struct iproc_pcie *pcie)

1.judgement was done based on the steps that been 
discribed by jayesh in PM document, it satisfies all the steps 
that the suspend is suppose to perform.
2. I have limited the pheriperals connected to
the device and performed the C-OFF commands.
only enabled USB(j346) in echi mode for the operation.

atf

https://chromium.googlesource.com/external/github.com/ARM-software/arm-trusted-firmware/+/v0.4-rc1/docs/firmware-design.md


09/19/17

Fuji Xerox
------------
Current status:
	A) Bad mode issue during suspend-resume (top-priority)
		- Checked bad_mode after switching to 115200 - Issue not seen.
		- PCIe GBE disabled and checked for bad_mode issue - Not seen in this scenario too
		- Applied USB patches and created new kernel image - Issue still observed.
	B) USB1.1 device not detected [FIXED]
		- device wasn't detected because of OHCI disabled in kernel tree
		- When OHCI enabled in device tree, USB1.1 device is recognized, but results in bad_mode.
		- Nakayama-san Enabled OHCI and tried image with patch on GISMO.  USB1.1 works without bad mode issue. Neominds team to 
		  try the same Image offshore and check if bad mode is seen during suspend-resume.
	C) Quad SPI not working
		- Quad SPI not enabled because chip_select variable in driver structure is not set. This requires platform data
		In the driver to be filled up. More study is required to find out why platform data is missing information.
	D) SPI clock speed not set to maximum
		Not started.
Plan:
	A)
	- continue investigation/debugging bad mode issue
	Tried disableing the GBE 

	- recheck if usb patch fixes bad mode issue in suspend-resume scenario (also received Image from Nakayama-san)

	- check timers in device drivers for serial and SPI as potential candidate for bad mode issue

	- check cache invalidate/evict inconsistency or possible delay during suspend-resume
	cache management in WRLINUX9
	arm common code mangement
		1. CPU PM notifiers
		2. Local timers save/restore
		3. cpu suspend/resume
		4. L2 suspend/resume

	PM shutdown steps(https://www.slideshare.net/linaroorg/idling-ar-msinabusyworld)
		1. save per CPU peripherals 
		2. save CPU resigter
		3  check L1 cache cleanup
		4. exit coherency 
		5. call wfi 
		
	- check CPU wake-up sequence during resume for possible out of sync with cache operations

	- Try to identify task/thread causing exception during resume

	- compare resume activity sequence in kernel with baud rates 38400 and 115200

	- Investigated exception vectors and code changes from WR product team.
	  Currently checking possibility of restoring pre-exception state during suspend-resume without causing panic(). 

		1. Exception vectors.

ENTRY(vectors)
	ventry	el1_sync_invalid		// Synchronous EL1t
	ventry	el1_irq_invalid			// IRQ EL1t
	ventry	el1_fiq_invalid			// FIQ EL1t
	ventry	el1_error_invalid		// Error EL1t

	ventry	el1_sync			// Synchronous EL1h
	ventry	el1_irq				// IRQ EL1h
	ventry	el1_fiq_invalid			// FIQ EL1h
	ventry	el1_error_invalid		// Error EL1h

	ventry	el0_sync			// Synchronous 64-bit EL0
	ventry	el0_irq				// IRQ 64-bit EL0
	ventry	el0_fiq_invalid			// FIQ 64-bit EL0
	ventry	el0_error_invalid		// Error 64-bit EL0

#ifdef CONFIG_COMPAT
	ventry	el0_sync_compat			// Synchronous 32-bit EL0
	ventry	el0_irq_compat			// IRQ 32-bit EL0
	ventry	el0_fiq_invalid_compat		// FIQ 32-bit EL0
	ventry	el0_error_invalid_compat	// Error 32-bit EL0
#else
	ventry	el0_sync_invalid		// Synchronous 32-bit EL0
	ventry	el0_irq_invalid			// IRQ 32-bit EL0
	ventry	el0_fiq_invalid			// FIQ 32-bit EL0
	ventry	el0_error_invalid		// Error 32-bit EL0
#endif
END(vectors)

	Handlers:- 

		EL0 mode handlers:-
		
	el0_inv:
	enable_dbg
	ct_user_exit
	mov	x0, sp
	mov	x1, #BAD_SYNC
	mov	x2, x25
	bl	bad_el0_sync  // WR COUSTOMER SUPPORT
	b	ret_to_user


		EL1 mode handlers:-
	
	el1_inv:
	// TODO: add support for undefined instructions in kernel mode
	enable_dbg
	mov	x0, sp
	mov	x2, x1
	mov	x1, #BAD_SYNC
	b	bad_mode
el1_error_invalid:
//	inv_entry 1, BAD_ERROR
ENDPROC(el1_error_invalid)



	ANALYSIS:-  
		The exception is triggerd after the power mangement resume is called.
		PM: resume of devices complete after 389.203 msecs -- o/p message from the linux PM core functions
		Restarting tasks ... -- Here the kernel tries to restart the suspended tasks and during this restart 
		one of the task creates exception. (It could be a system call to the kernel) 
		
	C)
	- continue investigation/debugging issue
	- Investigate reason for platform_data not available to enable Quad-SPI mode in SPI driver
	D)
	- start working on issue
	- Find out actual clock speed at which SPI is set to operate in kernel/driver configuration



